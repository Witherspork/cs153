State 0:
## Known stack suffix:
##
## LR(1) items:
exp_top' -> . exp_top [ # ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp_top shift to state 37
-- On exp shift to state 38
## Reductions:

State 1:
## Known stack suffix:
## TSTRING
## LR(1) items:
exp -> TSTRING . NULL [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
ty -> TSTRING . [ LBRACKET ]
## Transitions:
-- On NULL shift to state 2
## Reductions:
-- On LBRACKET
--   reduce production ty -> TSTRING

State 2:
## Known stack suffix:
## TSTRING NULL
## LR(1) items:
exp -> TSTRING NULL . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> TSTRING NULL

State 3:
## Known stack suffix:
## TINT
## LR(1) items:
ty -> TINT . [ LBRACKET IDENT ]
## Transitions:
## Reductions:
-- On LBRACKET IDENT
--   reduce production ty -> TINT

State 4:
## Known stack suffix:
## TILDE
## LR(1) items:
exp -> TILDE . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 36
## Reductions:

State 5:
## Known stack suffix:
## LPAREN
## LR(1) items:
exp -> LPAREN . exp RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 34
## Reductions:

State 6:
## Known stack suffix:
## INT
## LR(1) items:
exp -> INT . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> INT

State 7:
## Known stack suffix:
## IDENT
## LR(1) items:
exp -> IDENT . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> IDENT

State 8:
## Known stack suffix:
## DASH
## LR(1) items:
exp -> DASH . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 33
## Reductions:

State 9:
## Known stack suffix:
## BANG
## LR(1) items:
exp -> BANG . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 14
## Reductions:

State 10:
## Known stack suffix:
## ty
## LR(1) items:
exp -> ty . LBRACKET RBRACKET NULL [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
ty -> ty . LBRACKET RBRACKET [ LBRACKET ]
## Transitions:
-- On LBRACKET shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## ty LBRACKET
## LR(1) items:
exp -> ty LBRACKET . RBRACKET NULL [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
ty -> ty LBRACKET . RBRACKET [ LBRACKET ]
## Transitions:
-- On RBRACKET shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## ty LBRACKET RBRACKET
## LR(1) items:
exp -> ty LBRACKET RBRACKET . NULL [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
ty -> ty LBRACKET RBRACKET . [ LBRACKET ]
## Transitions:
-- On NULL shift to state 13
## Reductions:
-- On LBRACKET
--   reduce production ty -> ty LBRACKET RBRACKET

State 13:
## Known stack suffix:
## ty LBRACKET RBRACKET NULL
## LR(1) items:
exp -> ty LBRACKET RBRACKET NULL . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> ty LBRACKET RBRACKET NULL

State 14:
## Known stack suffix:
## BANG exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> BANG exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS EQEQ EOF DASH COMMA
--   reduce production exp -> BANG exp
** Conflict on EQEQ

State 15:
## Known stack suffix:
## exp LPAREN
## LR(1) items:
exp -> exp LPAREN . loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On separated_nonempty_list(COMMA,exp) shift to state 16
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 17
-- On exp shift to state 19
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,exp)) ->

State 16:
## Known stack suffix:
## separated_nonempty_list(COMMA,exp)
## LR(1) items:
loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp)

State 17:
## Known stack suffix:
## exp LPAREN loption(separated_nonempty_list(COMMA,exp))
## LR(1) items:
exp -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) . RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On RPAREN shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN
## LR(1) items:
exp -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN

State 19:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH COMMA ]
exp -> exp . DASH exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH COMMA ]
exp -> exp . STAR exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH COMMA ]
exp -> exp . EQEQ exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH COMMA ]
separated_nonempty_list(COMMA,exp) -> exp . [ RPAREN ]
separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RPAREN ]
## Transitions:
-- On STAR shift to state 20
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
-- On COMMA shift to state 31
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,exp) -> exp

State 20:
## Known stack suffix:
## exp STAR
## LR(1) items:
exp -> exp STAR . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## exp STAR exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp STAR exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS EQEQ EOF DASH COMMA
--   reduce production exp -> exp STAR exp
** Conflict on EQEQ

State 22:
## Known stack suffix:
## exp LBRACKET
## LR(1) items:
exp -> exp LBRACKET . exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## exp LBRACKET exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp LBRACKET exp . RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
## Transitions:
-- On STAR shift to state 20
-- On RBRACKET shift to state 24
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 24:
## Known stack suffix:
## exp LBRACKET exp RBRACKET
## LR(1) items:
exp -> exp LBRACKET exp RBRACKET . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> exp LBRACKET exp RBRACKET

State 25:
## Known stack suffix:
## exp PLUS
## LR(1) items:
exp -> exp PLUS . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## exp PLUS exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp PLUS exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On STAR shift to state 20
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
## Reductions:
-- On SEMI RPAREN RBRACKET PLUS EQEQ EOF DASH COMMA
--   reduce production exp -> exp PLUS exp
** Conflict on EQEQ

State 27:
## Known stack suffix:
## exp EQEQ
## LR(1) items:
exp -> exp EQEQ . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## exp EQEQ exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp EQEQ exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On STAR shift to state 20
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> exp EQEQ exp
** Conflict on STAR PLUS LPAREN LBRACKET EQEQ DASH

State 29:
## Known stack suffix:
## exp DASH
## LR(1) items:
exp -> exp DASH . exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## exp DASH exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp DASH exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On STAR shift to state 20
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
## Reductions:
-- On SEMI RPAREN RBRACKET PLUS EQEQ EOF DASH COMMA
--   reduce production exp -> exp DASH exp
** Conflict on EQEQ

State 31:
## Known stack suffix:
## exp COMMA
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp COMMA . separated_nonempty_list(COMMA,exp) [ RPAREN ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On separated_nonempty_list(COMMA,exp) shift to state 32
-- On exp shift to state 19
## Reductions:

State 32:
## Known stack suffix:
## exp COMMA separated_nonempty_list(COMMA,exp)
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp)

State 33:
## Known stack suffix:
## DASH exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> DASH exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On STAR shift to state 20
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
## Reductions:
-- On SEMI RPAREN RBRACKET PLUS EQEQ EOF DASH COMMA
--   reduce production exp -> DASH exp
** Conflict on EQEQ

State 34:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> LPAREN exp . RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On STAR shift to state 20
-- On RPAREN shift to state 35
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 35:
## Known stack suffix:
## LPAREN exp RPAREN
## LR(1) items:
exp -> LPAREN exp RPAREN . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA
--   reduce production exp -> LPAREN exp RPAREN

State 36:
## Known stack suffix:
## TILDE exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . DASH exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . STAR exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . EQEQ exp [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> TILDE exp . [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI RPAREN RBRACKET PLUS LPAREN LBRACKET EQEQ EOF DASH COMMA ]
## Transitions:
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
## Reductions:
-- On STAR SEMI RPAREN RBRACKET PLUS EQEQ EOF DASH COMMA
--   reduce production exp -> TILDE exp
** Conflict on EQEQ

State 37:
## Known stack suffix:
## exp_top
## LR(1) items:
exp_top' -> exp_top . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept exp_top

State 38:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR PLUS LPAREN LBRACKET EQEQ EOF DASH ]
exp -> exp . DASH exp [ STAR PLUS LPAREN LBRACKET EQEQ EOF DASH ]
exp -> exp . STAR exp [ STAR PLUS LPAREN LBRACKET EQEQ EOF DASH ]
exp -> exp . EQEQ exp [ STAR PLUS LPAREN LBRACKET EQEQ EOF DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR PLUS LPAREN LBRACKET EQEQ EOF DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR PLUS LPAREN LBRACKET EQEQ EOF DASH ]
exp_top -> exp . EOF [ # ]
## Transitions:
-- On STAR shift to state 20
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On EOF shift to state 39
-- On DASH shift to state 29
## Reductions:

State 39:
## Known stack suffix:
## exp EOF
## LR(1) items:
exp_top -> exp EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production exp_top -> exp EOF

State 40:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On TVOID shift to state 41
-- On TSTRING shift to state 44
-- On TINT shift to state 3
-- On GLOBAL shift to state 99
-- On ty shift to state 111
-- On prog shift to state 117
-- On list(decl) shift to state 118
-- On decl shift to state 120
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 41:
## Known stack suffix:
## TVOID
## LR(1) items:
decl -> TVOID . IDENT LPAREN arglist RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On IDENT shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## TVOID IDENT
## LR(1) items:
decl -> TVOID IDENT . LPAREN arglist RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## TVOID IDENT LPAREN
## LR(1) items:
decl -> TVOID IDENT LPAREN . arglist RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On TSTRING shift to state 44
-- On TINT shift to state 3
-- On ty shift to state 45
-- On separated_nonempty_list(COMMA,pair(ty,IDENT)) shift to state 51
-- On loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) shift to state 52
-- On arglist shift to state 53
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) ->

State 44:
## Known stack suffix:
## TSTRING
## LR(1) items:
ty -> TSTRING . [ LBRACKET IDENT ]
## Transitions:
## Reductions:
-- On LBRACKET IDENT
--   reduce production ty -> TSTRING

State 45:
## Known stack suffix:
## ty
## LR(1) items:
separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty . IDENT [ RPAREN ]
separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty . IDENT COMMA separated_nonempty_list(COMMA,pair(ty,IDENT)) [ RPAREN ]
ty -> ty . LBRACKET RBRACKET [ LBRACKET IDENT ]
## Transitions:
-- On LBRACKET shift to state 46
-- On IDENT shift to state 48
## Reductions:

State 46:
## Known stack suffix:
## ty LBRACKET
## LR(1) items:
ty -> ty LBRACKET . RBRACKET [ LBRACKET IDENT ]
## Transitions:
-- On RBRACKET shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## ty LBRACKET RBRACKET
## LR(1) items:
ty -> ty LBRACKET RBRACKET . [ LBRACKET IDENT ]
## Transitions:
## Reductions:
-- On LBRACKET IDENT
--   reduce production ty -> ty LBRACKET RBRACKET

State 48:
## Known stack suffix:
## ty IDENT
## LR(1) items:
separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty IDENT . [ RPAREN ]
separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty IDENT . COMMA separated_nonempty_list(COMMA,pair(ty,IDENT)) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 49
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty IDENT

State 49:
## Known stack suffix:
## ty IDENT COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty IDENT COMMA . separated_nonempty_list(COMMA,pair(ty,IDENT)) [ RPAREN ]
## Transitions:
-- On TSTRING shift to state 44
-- On TINT shift to state 3
-- On ty shift to state 45
-- On separated_nonempty_list(COMMA,pair(ty,IDENT)) shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## ty IDENT COMMA separated_nonempty_list(COMMA,pair(ty,IDENT))
## LR(1) items:
separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty IDENT COMMA separated_nonempty_list(COMMA,pair(ty,IDENT)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,pair(ty,IDENT)) -> ty IDENT COMMA separated_nonempty_list(COMMA,pair(ty,IDENT))

State 51:
## Known stack suffix:
## separated_nonempty_list(COMMA,pair(ty,IDENT))
## LR(1) items:
loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) -> separated_nonempty_list(COMMA,pair(ty,IDENT)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) -> separated_nonempty_list(COMMA,pair(ty,IDENT))

State 52:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,pair(ty,IDENT)))
## LR(1) items:
arglist -> loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production arglist -> loption(separated_nonempty_list(COMMA,pair(ty,IDENT)))

State 53:
## Known stack suffix:
## TVOID IDENT LPAREN arglist
## LR(1) items:
decl -> TVOID IDENT LPAREN arglist . RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On RPAREN shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## TVOID IDENT LPAREN arglist RPAREN
## LR(1) items:
decl -> TVOID IDENT LPAREN arglist RPAREN . block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On LBRACE shift to state 55
-- On block shift to state 98
## Reductions:

State 55:
## Known stack suffix:
## LBRACE
## LR(1) items:
block -> LBRACE . list(stmt) RBRACE [ WHILE VAR TVOID TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT GLOBAL EOF ELSE DASH BANG ]
## Transitions:
-- On WHILE shift to state 56
-- On VAR shift to state 61
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On RETURN shift to state 65
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IF shift to state 69
-- On IDENT shift to state 78
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On vdecl shift to state 79
-- On ty shift to state 10
-- On stmt shift to state 81
-- On list(stmt) shift to state 96
-- On lhs shift to state 83
-- On if_stmt shift to state 87
-- On exp shift to state 88
## Reductions:
-- On RBRACE
--   reduce production list(stmt) ->

State 56:
## Known stack suffix:
## WHILE
## LR(1) items:
stmt -> WHILE . LPAREN exp RPAREN block [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On LPAREN shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
stmt -> WHILE LPAREN . exp RPAREN block [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## WHILE LPAREN exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
stmt -> WHILE LPAREN exp . RPAREN block [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On STAR shift to state 20
-- On RPAREN shift to state 59
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 59:
## Known stack suffix:
## WHILE LPAREN exp RPAREN
## LR(1) items:
stmt -> WHILE LPAREN exp RPAREN . block [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On LBRACE shift to state 55
-- On block shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## WHILE LPAREN exp RPAREN block
## LR(1) items:
stmt -> WHILE LPAREN exp RPAREN block . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> WHILE LPAREN exp RPAREN block

State 61:
## Known stack suffix:
## VAR
## LR(1) items:
vdecl -> VAR . IDENT EQ exp [ SEMI ]
## Transitions:
-- On IDENT shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## VAR IDENT
## LR(1) items:
vdecl -> VAR IDENT . EQ exp [ SEMI ]
## Transitions:
-- On EQ shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## VAR IDENT EQ
## LR(1) items:
vdecl -> VAR IDENT EQ . exp [ SEMI ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## VAR IDENT EQ exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
vdecl -> VAR IDENT EQ exp . [ SEMI ]
## Transitions:
-- On STAR shift to state 20
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:
-- On SEMI
--   reduce production vdecl -> VAR IDENT EQ exp

State 65:
## Known stack suffix:
## RETURN
## LR(1) items:
stmt -> RETURN . SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
stmt -> RETURN . exp SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On SEMI shift to state 66
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 67
## Reductions:

State 66:
## Known stack suffix:
## RETURN SEMI
## LR(1) items:
stmt -> RETURN SEMI . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> RETURN SEMI

State 67:
## Known stack suffix:
## RETURN exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
stmt -> RETURN exp . SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On STAR shift to state 20
-- On SEMI shift to state 68
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 68:
## Known stack suffix:
## RETURN exp SEMI
## LR(1) items:
stmt -> RETURN exp SEMI . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> RETURN exp SEMI

State 69:
## Known stack suffix:
## IF
## LR(1) items:
if_stmt -> IF . LPAREN exp RPAREN block else_stmt [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On LPAREN shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
if_stmt -> IF LPAREN . exp RPAREN block else_stmt [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## IF LPAREN exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR RPAREN PLUS LPAREN LBRACKET EQEQ DASH ]
if_stmt -> IF LPAREN exp . RPAREN block else_stmt [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On STAR shift to state 20
-- On RPAREN shift to state 72
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 72:
## Known stack suffix:
## IF LPAREN exp RPAREN
## LR(1) items:
if_stmt -> IF LPAREN exp RPAREN . block else_stmt [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On LBRACE shift to state 55
-- On block shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## IF LPAREN exp RPAREN block
## LR(1) items:
if_stmt -> IF LPAREN exp RPAREN block . else_stmt [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On ELSE shift to state 74
-- On else_stmt shift to state 77
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production else_stmt ->

State 74:
## Known stack suffix:
## ELSE
## LR(1) items:
else_stmt -> ELSE . block [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
else_stmt -> ELSE . if_stmt [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On LBRACE shift to state 55
-- On IF shift to state 69
-- On if_stmt shift to state 75
-- On block shift to state 76
## Reductions:

State 75:
## Known stack suffix:
## ELSE if_stmt
## LR(1) items:
else_stmt -> ELSE if_stmt . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production else_stmt -> ELSE if_stmt

State 76:
## Known stack suffix:
## ELSE block
## LR(1) items:
else_stmt -> ELSE block . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production else_stmt -> ELSE block

State 77:
## Known stack suffix:
## IF LPAREN exp RPAREN block else_stmt
## LR(1) items:
if_stmt -> IF LPAREN exp RPAREN block else_stmt . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production if_stmt -> IF LPAREN exp RPAREN block else_stmt

State 78:
## Known stack suffix:
## IDENT
## LR(1) items:
exp -> IDENT . [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
lhs -> IDENT . [ EQ ]
## Transitions:
## Reductions:
-- On STAR PLUS LPAREN LBRACKET EQEQ DASH
--   reduce production exp -> IDENT
-- On EQ
--   reduce production lhs -> IDENT

State 79:
## Known stack suffix:
## vdecl
## LR(1) items:
stmt -> vdecl . SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On SEMI shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## vdecl SEMI
## LR(1) items:
stmt -> vdecl SEMI . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> vdecl SEMI

State 81:
## Known stack suffix:
## stmt
## LR(1) items:
list(stmt) -> stmt . list(stmt) [ RBRACE ]
## Transitions:
-- On WHILE shift to state 56
-- On VAR shift to state 61
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On RETURN shift to state 65
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IF shift to state 69
-- On IDENT shift to state 78
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On vdecl shift to state 79
-- On ty shift to state 10
-- On stmt shift to state 81
-- On list(stmt) shift to state 82
-- On lhs shift to state 83
-- On if_stmt shift to state 87
-- On exp shift to state 88
## Reductions:
-- On RBRACE
--   reduce production list(stmt) ->

State 82:
## Known stack suffix:
## stmt list(stmt)
## LR(1) items:
list(stmt) -> stmt list(stmt) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production list(stmt) -> stmt list(stmt)

State 83:
## Known stack suffix:
## lhs
## LR(1) items:
stmt -> lhs . EQ exp SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On EQ shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## lhs EQ
## LR(1) items:
stmt -> lhs EQ . exp SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## lhs EQ exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR SEMI PLUS LPAREN LBRACKET EQEQ DASH ]
stmt -> lhs EQ exp . SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On STAR shift to state 20
-- On SEMI shift to state 86
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 86:
## Known stack suffix:
## lhs EQ exp SEMI
## LR(1) items:
stmt -> lhs EQ exp SEMI . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> lhs EQ exp SEMI

State 87:
## Known stack suffix:
## if_stmt
## LR(1) items:
stmt -> if_stmt . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> if_stmt

State 88:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
lhs -> exp . LBRACKET exp RBRACKET [ EQ ]
stmt -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On STAR shift to state 20
-- On PLUS shift to state 25
-- On LPAREN shift to state 89
-- On LBRACKET shift to state 93
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 89:
## Known stack suffix:
## exp LPAREN
## LR(1) items:
exp -> exp LPAREN . loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
stmt -> exp LPAREN . loption(separated_nonempty_list(COMMA,exp)) RPAREN SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On separated_nonempty_list(COMMA,exp) shift to state 16
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 90
-- On exp shift to state 19
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,exp)) ->

State 90:
## Known stack suffix:
## exp LPAREN loption(separated_nonempty_list(COMMA,exp))
## LR(1) items:
exp -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) . RPAREN [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
stmt -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) . RPAREN SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On RPAREN shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN
## LR(1) items:
exp -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN . [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
stmt -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN . SEMI [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
-- On SEMI shift to state 92
## Reductions:
-- On STAR PLUS LPAREN LBRACKET EQEQ DASH
--   reduce production exp -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN

State 92:
## Known stack suffix:
## exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN SEMI
## LR(1) items:
stmt -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN SEMI . [ WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT EOF DASH BANG
--   reduce production stmt -> exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN SEMI

State 93:
## Known stack suffix:
## exp LBRACKET
## LR(1) items:
exp -> exp LBRACKET . exp RBRACKET [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
lhs -> exp LBRACKET . exp RBRACKET [ EQ ]
## Transitions:
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IDENT shift to state 7
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On ty shift to state 10
-- On exp shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## exp LBRACKET exp
## LR(1) items:
exp -> exp . PLUS exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . DASH exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . STAR exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . EQEQ exp [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LBRACKET exp RBRACKET [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp LBRACKET exp . RBRACKET [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
exp -> exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN [ STAR RBRACKET PLUS LPAREN LBRACKET EQEQ DASH ]
lhs -> exp LBRACKET exp . RBRACKET [ EQ ]
## Transitions:
-- On STAR shift to state 20
-- On RBRACKET shift to state 95
-- On PLUS shift to state 25
-- On LPAREN shift to state 15
-- On LBRACKET shift to state 22
-- On EQEQ shift to state 27
-- On DASH shift to state 29
## Reductions:

State 95:
## Known stack suffix:
## exp LBRACKET exp RBRACKET
## LR(1) items:
exp -> exp LBRACKET exp RBRACKET . [ STAR PLUS LPAREN LBRACKET EQEQ DASH ]
lhs -> exp LBRACKET exp RBRACKET . [ EQ ]
## Transitions:
## Reductions:
-- On STAR PLUS LPAREN LBRACKET EQEQ DASH
--   reduce production exp -> exp LBRACKET exp RBRACKET
-- On EQ
--   reduce production lhs -> exp LBRACKET exp RBRACKET

State 96:
## Known stack suffix:
## LBRACE list(stmt)
## LR(1) items:
block -> LBRACE list(stmt) . RBRACE [ WHILE VAR TVOID TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT GLOBAL EOF ELSE DASH BANG ]
## Transitions:
-- On RBRACE shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## LBRACE list(stmt) RBRACE
## LR(1) items:
block -> LBRACE list(stmt) RBRACE . [ WHILE VAR TVOID TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT GLOBAL EOF ELSE DASH BANG ]
## Transitions:
## Reductions:
-- On WHILE VAR TVOID TSTRING TINT TILDE RETURN RBRACE LPAREN INT IF IDENT GLOBAL EOF ELSE DASH BANG
--   reduce production block -> LBRACE list(stmt) RBRACE

State 98:
## Known stack suffix:
## TVOID IDENT LPAREN arglist RPAREN block
## LR(1) items:
decl -> TVOID IDENT LPAREN arglist RPAREN block . [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
## Reductions:
-- On TVOID TSTRING TINT GLOBAL EOF
--   reduce production decl -> TVOID IDENT LPAREN arglist RPAREN block

State 99:
## Known stack suffix:
## GLOBAL
## LR(1) items:
decl -> GLOBAL . IDENT EQ gexp SEMI [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On IDENT shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## GLOBAL IDENT
## LR(1) items:
decl -> GLOBAL IDENT . EQ gexp SEMI [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On EQ shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## GLOBAL IDENT EQ
## LR(1) items:
decl -> GLOBAL IDENT EQ . gexp SEMI [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On TSTRING shift to state 102
-- On TINT shift to state 3
-- On INT shift to state 104
-- On ty shift to state 105
-- On gexp shift to state 109
## Reductions:

State 102:
## Known stack suffix:
## TSTRING
## LR(1) items:
gexp -> TSTRING . NULL [ SEMI ]
ty -> TSTRING . [ LBRACKET ]
## Transitions:
-- On NULL shift to state 103
## Reductions:
-- On LBRACKET
--   reduce production ty -> TSTRING

State 103:
## Known stack suffix:
## TSTRING NULL
## LR(1) items:
gexp -> TSTRING NULL . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production gexp -> TSTRING NULL

State 104:
## Known stack suffix:
## INT
## LR(1) items:
gexp -> INT . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production gexp -> INT

State 105:
## Known stack suffix:
## ty
## LR(1) items:
gexp -> ty . LBRACKET RBRACKET NULL [ SEMI ]
ty -> ty . LBRACKET RBRACKET [ LBRACKET ]
## Transitions:
-- On LBRACKET shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## ty LBRACKET
## LR(1) items:
gexp -> ty LBRACKET . RBRACKET NULL [ SEMI ]
ty -> ty LBRACKET . RBRACKET [ LBRACKET ]
## Transitions:
-- On RBRACKET shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## ty LBRACKET RBRACKET
## LR(1) items:
gexp -> ty LBRACKET RBRACKET . NULL [ SEMI ]
ty -> ty LBRACKET RBRACKET . [ LBRACKET ]
## Transitions:
-- On NULL shift to state 108
## Reductions:
-- On LBRACKET
--   reduce production ty -> ty LBRACKET RBRACKET

State 108:
## Known stack suffix:
## ty LBRACKET RBRACKET NULL
## LR(1) items:
gexp -> ty LBRACKET RBRACKET NULL . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production gexp -> ty LBRACKET RBRACKET NULL

State 109:
## Known stack suffix:
## GLOBAL IDENT EQ gexp
## LR(1) items:
decl -> GLOBAL IDENT EQ gexp . SEMI [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On SEMI shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## GLOBAL IDENT EQ gexp SEMI
## LR(1) items:
decl -> GLOBAL IDENT EQ gexp SEMI . [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
## Reductions:
-- On TVOID TSTRING TINT GLOBAL EOF
--   reduce production decl -> GLOBAL IDENT EQ gexp SEMI

State 111:
## Known stack suffix:
## ty
## LR(1) items:
decl -> ty . IDENT LPAREN arglist RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
ty -> ty . LBRACKET RBRACKET [ LBRACKET IDENT ]
## Transitions:
-- On LBRACKET shift to state 46
-- On IDENT shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## ty IDENT
## LR(1) items:
decl -> ty IDENT . LPAREN arglist RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On LPAREN shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## ty IDENT LPAREN
## LR(1) items:
decl -> ty IDENT LPAREN . arglist RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On TSTRING shift to state 44
-- On TINT shift to state 3
-- On ty shift to state 45
-- On separated_nonempty_list(COMMA,pair(ty,IDENT)) shift to state 51
-- On loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) shift to state 52
-- On arglist shift to state 114
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pair(ty,IDENT))) ->

State 114:
## Known stack suffix:
## ty IDENT LPAREN arglist
## LR(1) items:
decl -> ty IDENT LPAREN arglist . RPAREN block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On RPAREN shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## ty IDENT LPAREN arglist RPAREN
## LR(1) items:
decl -> ty IDENT LPAREN arglist RPAREN . block [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
-- On LBRACE shift to state 55
-- On block shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## ty IDENT LPAREN arglist RPAREN block
## LR(1) items:
decl -> ty IDENT LPAREN arglist RPAREN block . [ TVOID TSTRING TINT GLOBAL EOF ]
## Transitions:
## Reductions:
-- On TVOID TSTRING TINT GLOBAL EOF
--   reduce production decl -> ty IDENT LPAREN arglist RPAREN block

State 117:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 118:
## Known stack suffix:
## list(decl)
## LR(1) items:
prog -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
prog -> list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> list(decl) EOF

State 120:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On TVOID shift to state 41
-- On TSTRING shift to state 44
-- On TINT shift to state 3
-- On GLOBAL shift to state 99
-- On ty shift to state 111
-- On list(decl) shift to state 121
-- On decl shift to state 120
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 121:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

State 122:
## Known stack suffix:
##
## LR(1) items:
stmt_top' -> . stmt_top [ # ]
## Transitions:
-- On WHILE shift to state 56
-- On VAR shift to state 61
-- On TSTRING shift to state 1
-- On TINT shift to state 3
-- On TILDE shift to state 4
-- On RETURN shift to state 65
-- On LPAREN shift to state 5
-- On INT shift to state 6
-- On IF shift to state 69
-- On IDENT shift to state 78
-- On DASH shift to state 8
-- On BANG shift to state 9
-- On vdecl shift to state 79
-- On ty shift to state 10
-- On stmt_top shift to state 123
-- On stmt shift to state 124
-- On lhs shift to state 83
-- On if_stmt shift to state 87
-- On exp shift to state 88
## Reductions:

State 123:
## Known stack suffix:
## stmt_top
## LR(1) items:
stmt_top' -> stmt_top . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept stmt_top

State 124:
## Known stack suffix:
## stmt
## LR(1) items:
stmt_top -> stmt . EOF [ # ]
## Transitions:
-- On EOF shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## stmt EOF
## LR(1) items:
stmt_top -> stmt EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production stmt_top -> stmt EOF

